# https://docs.github.com/en/actions

name: "Integrate"

on: # yamllint disable-line rule:truthy
  pull_request: null
  push:
    branches:
      - "main"

env:
  COMPOSER_VERSION: "1.10.15"
  ERGEBNIS_BOT_NAME: "ergebnis-bot"
  PHP_EXTENSIONS: "mbstring"
  PHP_INI_VALUES: "memory_limit=-1, phar.readonly=0"

jobs:
  coding-standards:
    name: "Coding Standards"

    runs-on: "ubuntu-latest"

    strategy:
      matrix:
        php-version:
          - "7.2"

        dependencies:
          - "locked"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v2.3.3"

      - name: "Lint YAML files"
        uses: "ibiqlik/action-yamllint@v2.0.0"
        with:
          config_file: ".yamllint.yaml"
          file_or_dir: "."
          strict: true

      - name: "Install PHP with extensions"
        uses: "shivammathur/setup-php@2.7.0"
        with:
          coverage: "none"
          extensions: "${{ env.PHP_EXTENSIONS }}"
          ini-values: "${{ env.PHP_INI_VALUES }}"
          php-version: "${{ matrix.php-version }}"

      - name: "Validate composer.json and composer.lock"
        run: "composer validate --strict"

      - name: "Determine composer cache directory"
        uses: "./.github/actions/composer/composer/determine-cache-directory"

      - name: "Cache dependencies installed with composer"
        uses: "actions/cache@v2.1.2"
        with:
          path: "${{ env.COMPOSER_CACHE_DIR }}"
          key: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-${{ hashFiles('composer.lock') }}"
          restore-keys: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-"

      - name: "Install ${{ matrix.dependencies }} dependencies with composer"
        uses: "./.github/actions/composer/composer/install"
        with:
          dependencies: "${{ matrix.dependencies }}"

      - name: "Run ergebnis/composer-normalize"
        run: ".phive/composer-normalize --dry-run"

      - name: "Create cache directory for friendsofphp/php-cs-fixer"
        run: "mkdir -p .build/php-cs-fixer"

      - name: "Cache cache directory for friendsofphp/php-cs-fixer"
        uses: "actions/cache@v2.1.2"
        with:
          path: ".build/php-cs-fixer"
          key: "php-${{ matrix.php-version }}-php-cs-fixer-${{ github.sha }}"
          restore-keys: "php-${{ matrix.php-version }}-php-cs-fixer-"

      - name: "Run friendsofphp/php-cs-fixer"
        run: "vendor/bin/php-cs-fixer fix --config=.php_cs --diff --diff-format=udiff --dry-run --verbose"

  dependency-analysis:
    name: "Dependency Analysis"

    runs-on: "ubuntu-latest"

    strategy:
      matrix:
        php-version:
          - "7.4"

        dependencies:
          - "locked"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v2.3.3"

      - name: "Install PHP with extensions"
        uses: "shivammathur/setup-php@2.7.0"
        with:
          coverage: "none"
          extensions: "${{ env.PHP_EXTENSIONS }}"
          php-version: "${{ matrix.php-version }}"

      - name: "Determine composer cache directory"
        uses: "./.github/actions/composer/composer/determine-cache-directory"

      - name: "Cache dependencies installed with composer"
        uses: "actions/cache@v2.1.2"
        with:
          path: "${{ env.COMPOSER_CACHE_DIR }}"
          key: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-${{ hashFiles('composer.lock') }}"
          restore-keys: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-"

      - name: "Install ${{ matrix.dependencies }} dependencies with composer"
        uses: "./.github/actions/composer/composer/install"
        with:
          dependencies: "${{ matrix.dependencies }}"

      - name: "Run maglnet/composer-require-checker"
        run: ".phive/composer-require-checker check --config-file=$(pwd)/composer-require-checker.json"

  static-code-analysis:
    name: "Static Code Analysis"

    runs-on: "ubuntu-latest"

    strategy:
      matrix:
        php-version:
          - "7.4"

        dependencies:
          - "locked"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v2.3.3"

      - name: "Install PHP with extensions"
        uses: "shivammathur/setup-php@2.7.0"
        with:
          coverage: "none"
          extensions: "${{ env.PHP_EXTENSIONS }}"
          ini-values: "${{ env.PHP_INI_VALUES }}"
          php-version: "${{ matrix.php-version }}"

      - name: "Determine composer cache directory"
        uses: "./.github/actions/composer/composer/determine-cache-directory"

      - name: "Cache dependencies installed with composer"
        uses: "actions/cache@v2.1.2"
        with:
          path: "${{ env.COMPOSER_CACHE_DIR }}"
          key: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-${{ hashFiles('composer.lock') }}"
          restore-keys: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-"

      - name: "Install ${{ matrix.dependencies }} dependencies with composer"
        uses: "./.github/actions/composer/composer/install"
        with:
          dependencies: "${{ matrix.dependencies }}"

      - name: "Create cache directory for phpstan/phpstan"
        run: "mkdir -p .build/phpstan"

      - name: "Cache cache directory for phpstan/phpstan"
        uses: "actions/cache@v2.1.2"
        with:
          path: ".build/phpstan"
          key: "php-${{ matrix.php-version }}-phpstan-${{ github.sha }}"
          restore-keys: "php-${{ matrix.php-version }}-phpstan-"

      - name: "Run phpstan/phpstan"
        run: "vendor/bin/phpstan analyse --configuration=phpstan.neon --memory-limit=-1"

      - name: "Create cache directory for vimeo/psalm"
        run: "mkdir -p .build/psalm"

      - name: "Cache cache directory for vimeo/psalm"
        uses: "actions/cache@v2.1.2"
        with:
          path: ".build/psalm"
          key: "php-${{ matrix.php-version }}-psalm-${{ github.sha }}"
          restore-keys: "php-${{ matrix.php-version }}-psalm-"

      - name: "Run vimeo/psalm"
        run: "vendor/bin/psalm --config=psalm.xml --diff --shepherd --show-info=false --stats --threads=4"

  tests:
    name: "Tests"

    runs-on: "ubuntu-latest"

    strategy:
      fail-fast: false
      matrix:
        php-version:
          - "7.2"
          - "7.3"
          - "7.4"

        composer-version:
          - "1"
          - "2"

        dependencies:
          - "lowest"
          - "locked"
          - "highest"

        include:
          - php-version: "8.0"
            composer-version: "2"
            dependencies: "lowest"

          - php-version: "8.0"
            composer-version: "2"
            dependencies: "locked"

          - php-version: "8.0"
            composer-version: "2"
            dependencies: "highest"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v2.3.3"

      - name: "Install PHP with extensions"
        uses: "shivammathur/setup-php@2.7.0"
        with:
          coverage: "none"
          extensions: "${{ env.PHP_EXTENSIONS }}"
          ini-values: "${{ env.PHP_INI_VALUES }}"
          php-version: "${{ matrix.php-version }}"

      - name: "Set up problem matchers for phpunit/phpunit"
        run: "echo \"::add-matcher::${{ runner.tool_cache }}/phpunit.json\""

      - name: "Install composer:^1"
        if: "matrix.composer-version == '1'"
        run: "composer self-update ${{ env.COMPOSER_VERSION }}"

      - name: "Install composer:^2"
        if: "matrix.composer-version == '2'"
        run: "composer self-update --snapshot"

      - name: "Show composer version"
        run: "composer --version"

      - name: "Determine composer cache directory"
        uses: "./.github/actions/composer/composer/determine-cache-directory"

      - name: "Cache dependencies installed with composer"
        uses: "actions/cache@v2.1.2"
        with:
          path: "${{ env.COMPOSER_CACHE_DIR }}"
          key: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-${{ hashFiles('composer.lock') }}"
          restore-keys: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-"

      - name: "Install ${{ matrix.dependencies }} dependencies with composer"
        uses: "./.github/actions/composer/composer/install"
        with:
          dependencies: "${{ matrix.dependencies }}"

      - name: "Run auto-review tests with phpunit/phpunit"
        run: "vendor/bin/phpunit --configuration=test/AutoReview/phpunit.xml"

      - name: "Run unit tests with phpunit/phpunit"
        run: "vendor/bin/phpunit --configuration=test/Unit/phpunit.xml"

      - name: "Run integration tests with phpunit/phpunit"
        run: "vendor/bin/phpunit --configuration=test/Integration/phpunit.xml"

  code-coverage:
    name: "Code Coverage"

    runs-on: "ubuntu-latest"

    strategy:
      matrix:
        php-version:
          - "7.4"

        dependencies:
          - "locked"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v2.3.3"

      - name: "Install PHP with extensions"
        uses: "shivammathur/setup-php@2.7.0"
        with:
          coverage: "pcov"
          extensions: "${{ env.PHP_EXTENSIONS }}"
          ini-values: "${{ env.PHP_INI_VALUES }}"
          php-version: "${{ matrix.php-version }}"

      - name: "Set up problem matchers for phpunit/phpunit"
        run: "echo \"::add-matcher::${{ runner.tool_cache }}/phpunit.json\""

      - name: "Determine composer cache directory"
        uses: "./.github/actions/composer/composer/determine-cache-directory"

      - name: "Cache dependencies installed with composer"
        uses: "actions/cache@v2.1.2"
        with:
          path: "${{ env.COMPOSER_CACHE_DIR }}"
          key: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-${{ hashFiles('composer.lock') }}"
          restore-keys: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-"

      - name: "Install ${{ matrix.dependencies }} dependencies with composer"
        uses: "./.github/actions/composer/composer/install"
        with:
          dependencies: "${{ matrix.dependencies }}"

      - name: "Collect code coverage with pcov and phpunit/phpunit"
        run: "vendor/bin/phpunit --configuration=test/Integration/phpunit.xml --coverage-clover=.build/logs/clover.xml"

      - name: "Send code coverage report to Codecov.io"
        env:
          CODECOV_TOKEN: "${{ secrets.CODECOV_TOKEN }}"
        run: "bash <(curl -s https://codecov.io/bash)"

  compile-phar:
    name: "Compile Phar"

    runs-on: "ubuntu-latest"

    strategy:
      matrix:
        php-version:
          - "7.4"

        dependencies:
          - "locked"

    env:
      COMPOSER_NORMALIZE_PHAR: ".build/phar/composer-normalize.phar"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v2.3.3"

      - name: "Install PHP with extensions"
        uses: "shivammathur/setup-php@2.7.0"
        with:
          coverage: "none"
          extensions: "${{ env.PHP_EXTENSIONS }}"
          ini-values: "${{ env.PHP_INI_VALUES }}"
          php-version: "${{ matrix.php-version }}"

      - name: "Determine composer cache directory"
        uses: "./.github/actions/composer/composer/determine-cache-directory"

      - name: "Cache dependencies installed with composer"
        uses: "actions/cache@v2.1.2"
        with:
          path: "${{ env.COMPOSER_CACHE_DIR }}"
          key: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-${{ hashFiles('composer.lock') }}"
          restore-keys: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-"

      - name: "Install ${{ matrix.dependencies }} dependencies with composer"
        uses: "./.github/actions/composer/composer/install"
        with:
          dependencies: "${{ matrix.dependencies }}"

      - name: "Install highest dependencies from composer.json"
        if: "matrix.dependencies == 'highest'"
        run: "composer update --no-interaction --no-progress --no-suggest"

      - name: "Remove composer/composer"
        run: "composer remove composer/composer --no-interaction --no-progress --with-all-dependencies"

      - name: "Require composer/composer"
        run: "composer require composer/composer:${{ env.COMPOSER_VERSION }} --no-interaction --no-progress --no-suggest"

      - name: "Remove git placeholder configuration with jq"
        run: "echo $(cat box.json | jq 'del(.git)') > box.json"

      - name: "Validate configuration for humbug/box"
        run: "phar/box.phar validate box.json"

      - name: "Compile composer-normalize.phar with humbug/box"
        run: "phar/box.phar compile --config=box.json"

      - name: "Show info about composer-normalize.phar with humbug/box"
        run: "phar/box.phar info ${{ env.COMPOSER_NORMALIZE_PHAR }}"

      - name: "Run composer-normalize.phar"
        run: "${{ env.COMPOSER_NORMALIZE_PHAR }}"

      - name: "Run composer-normalize.phar with argument and options"
        run: "${{ env.COMPOSER_NORMALIZE_PHAR }} --dry-run composer.json"

  merge:
    name: "Merge"

    runs-on: "ubuntu-latest"

    needs:
      - "code-coverage"
      - "coding-standards"
      - "compile-phar"
      - "dependency-analysis"
      - "static-code-analysis"
      - "tests"

    if: >
      github.event_name == 'pull_request' &&
      github.event.pull_request.draft == false && (
        github.event.action == 'opened' ||
        github.event.action == 'reopened' ||
        github.event.action == 'synchronize'
      ) && (
        (github.actor == 'dependabot[bot]' && startsWith(github.event.pull_request.title, 'composer(deps-dev)')) ||
        (github.actor == 'dependabot[bot]' && startsWith(github.event.pull_request.title, 'github-actions(deps)')) ||
        (github.actor == 'ergebnis-bot' && github.event.pull_request.title == 'Enhancement: Update license year') ||
        (github.actor == 'localheinz' && contains(github.event.pull_request.labels.*.name, 'merge'))
      )

    steps:
      - name: "Request review from @${{ env.ERGEBNIS_BOT_NAME }}"
        uses: "actions/github-script@v3.0.0"
        with:
          github-token: "${{ secrets.ERGEBNIS_BOT_TOKEN }}"
          script: |
            const pullRequest = context.payload.pull_request
            const repository = context.repo

            const reviewers = [
              "${{ env.ERGEBNIS_BOT_NAME }}",
            ]

            await github.pulls.requestReviewers({
              owner: repository.owner,
              pull_number: pullRequest.number,
              repo: repository.repo,
              reviewers: reviewers,
            })

      - name: "Assign @${{ env.ERGEBNIS_BOT_NAME }}"
        uses: "actions/github-script@v3.0.0"
        with:
          github-token: "${{ secrets.ERGEBNIS_BOT_TOKEN }}"
          script: |
            const pullRequest = context.payload.pull_request
            const repository = context.repo

            const assignees = [
              "${{ env.ERGEBNIS_BOT_NAME }}",
            ]

            await github.issues.addAssignees({
              assignees: assignees,
              issue_number: pullRequest.number,
              owner: repository.owner,
              repo: repository.repo,
            })

      - name: "Approve pull request"
        uses: "actions/github-script@v3.0.0"
        if: "github.actor != '${{ env.ERGEBNIS_BOT_NAME }}'"
        with:
          github-token: "${{ secrets.ERGEBNIS_BOT_TOKEN }}"
          script: |
            const pullRequest = context.payload.pull_request
            const repository = context.repo

            await github.pulls.createReview({
              event: "APPROVE",
              owner: repository.owner,
              pull_number: pullRequest.number,
              repo: repository.repo,
            })

      - name: "Merge pull request"
        uses: "actions/github-script@v3.0.0"
        with:
          github-token: "${{ secrets.ERGEBNIS_BOT_TOKEN }}"
          script: |
            const pullRequest = context.payload.pull_request
            const repository = context.repo

            await github.pulls.merge({
              merge_method: "merge",
              owner: repository.owner,
              pull_number: pullRequest.number,
              repo: repository.repo,
            })
